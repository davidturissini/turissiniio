define('application/Application', ['q','mustache','underscore','backbone','application/routes/load','application/html/builder','application/data/builder'], function (Q,Mustache,_,Backbone,routesLoad,htmlBuilder,dataBuilder) {

	
	
	
	
	
	
	


	function getRoutes() {
		
		return routesLoad().then(function (resourceContents) {
			return JSON.parse(resourceContents);
		});

	};

	function Application (options) {
		options = options || {};
		this._router = options.router;
		this._routerFormatter = options.routerFormatter;
	};


	var proto = Application.prototype = _.extend({}, Backbone.Events);


	proto._onRouteChange = function (route, req, res) {
		var routeArgValues;
		var routeArgProps;

		if (req && req.params) {
			route.params = req.params;
		} else {
		
			route.params = {};
			routeArgValues = Array.prototype.slice.call(arguments, 1);
			routeArgProps = route.path.match(/:[a-zA-Z]+/g);
			
			if (routeArgProps) {
				routeArgProps.forEach(function (prop, index) {
					route.params[prop.replace(':', '')] = routeArgValues[index]; 
				});
			}
		}

		this.trigger('route:change', {
			target:route,
			request:req,
			response:res
		});

		Q.all([
			htmlBuilder(route),
			dataBuilder(route)
		])
		
		.spread(function (htmlString, data) {
			
			if (data) {
				htmlString = Mustache.render(htmlString, data);
			}

			this.trigger('route:html:load', {
				target:route,
				request:req,
				response:res,
				html:htmlString,
				environment:{
					bodyCSSClass:route.name.split(':').join('-')
				},
				data:data
			});

		}.bind(this));

		
	};


	proto.activate = function () {
		var router = this._router;
		var routerFormatter = this._routerFormatter;
		var promise;

		promise = getRoutes();
		
		promise = promise.then(function (routes) {
			this.trigger('route:load', {
				routes:routes
			});

		}.bind(this));

	};


	return Application;


});define('application/data/builder', ['q','resource/fetch'], function (Q,resourceFetch) {

	
	

	return function dataBuilder (route) {
		var resourcePath = null;
		var promise;
		var defer;

		defer = Q.defer();
		
		promise = defer.promise;

		resourceFetch('/config/restDomains.json')
			.then(function (restConfig) {
				require(
					['controller/' + route.controller],

					function (controller) {
						var controllerPromise = controller(route, JSON.parse(restConfig));

						if (typeof controllerPromise.then === 'function') {
							controllerPromise.then(defer.resolve.bind(defer));
						} else {

							defer.resolve(controllerPromise);
						}

					}
				);
			})


		

		return promise;

	}

});define('application/html/builder', ['q','resource/fetch','mustache'], function (Q,resourceFetch,Mustache) {

	
	
	


	return function (route) {

		var viewPath = route.template || route.name.split(':').join('/') + '.html';
		var promises = [];

		if (viewPath[0] !== '.') {
			viewPath = '/html/views/' + viewPath;
		}

		return resourceFetch(viewPath);
		

	}


});
define('application/init', ['application/Application'], function (Application) {

	

	return function init(options) {
		return new Application(options);

	}


});define('application/initializers/browser', ['q','backbone','element/observer/linkClick','application/init','application/router/factory','jQuery'], function (Q,Backbone,linkClick,init,routerFactory,jQuery) {

	
	
	
	
	
	
	var initialLoad = true;
	var previousClassName = '';

	var router = routerFactory();
	var application;
	var currentInteractiveController = null;
	jQuery('html').addClass('mobile');
	var contentEl = jQuery('#content');
	var htmlEl = jQuery('html');

	application = init();

	application.on('route:change', function () {
		if (htmlEl.hasClass('loading') === false) {
			htmlEl.addClass('loading fixed-full');
		}
	});

	application.on('route:html:load', function (evt) {
		var route = evt.target;
		var className;

		if (initialLoad === false) {
			
			_gaq.push(['_setAccount', 'UA-31293401-2']);
        	_gaq.push(['_trackPageview', '/' + evt.target.path]);

			document.title = evt.data.title;
			jQuery('html').removeClass(previousClassName);
			jQuery('html').addClass(evt.environment.bodyCSSClass);
			previousClassName = evt.environment.bodyCSSClass;
			window.scrollTo(0, 0);
		} else {
			
			initialLoad = false;
		}

		require(
			['interactive/' + route.controller],

			function (interactiveController) {
				var defer = Q.defer();
				var promise;

				var html = jQuery('<div></div>');
				html.html(evt.html);
				if (currentInteractiveController && typeof currentInteractiveController.unload === 'function') {
					currentInteractiveController.unload();
				}

				defer.resolve();
				
				promise = defer.promise;

				promise = promise.then(function () {
					return interactiveController.load(evt.data, html);
				});
				
				promise = promise.then(function () {
					
					contentEl.empty().append(html.children());

					if (currentInteractiveController && typeof currentInteractiveController.afterRemove === 'function') {
						currentInteractiveController.afterRemove();
					}

					if (typeof interactiveController.afterAppend === 'function') {
						return interactiveController.afterAppend(evt.data, contentEl);
					}

				});

				promise = promise.then(function () {
					if (htmlEl.hasClass('loading') === true) {
						htmlEl.removeClass('loading fixed-full');
					}

					currentInteractiveController = interactiveController;

				});

				
				
			}
		)

	});


	application.on('route:load', function (evt) {
		evt.routes.reverse().forEach(function (route) {
			var boundApplicationOnChange = application._onRouteChange.bind(application, route);
			router.route(route.path, '', boundApplicationOnChange);
			router.route(route.path + '/', '', boundApplicationOnChange);
	  	}.bind(this));


		linkClick(router);
		Backbone.history.start({
	    	pushState:true
	    });
	    
	});

	application.activate();

});define('application/resource/browser/browserfetch', ['q','jQuery'], function (Q,jQuery) {

	
	


	function browserFetch (defer, path) {

		jQuery.ajax({
			url:path,
			dataType:'text'
		})

		.then(defer.resolve.bind(defer));
	}


	return function (path) {
		var defer = Q.defer();

	    browserFetch(defer, path);

		return defer.promise;

	}
});
define('application/resource/server/fetch', ['resource/fsfetch','resource/urlfetch'], function (fsfetch,urlfetch) {
	
	
	

	return function resourceFetch (path) {
		
		if (/http\:\/\//.test(path)) {
			return urlfetch(path);
		} else {

			return fsfetch(path);
		}
	};


});define('application/resource/server/fsfetch', ['q','fs'], function (Q,fs) {

	
	

	function nodeJSFetch (defer, path) {
		var baseDir = './public';


		var fileContents = fs.readFile(baseDir + path, 'utf-8', function (err, data) {
			if (err) {
				defer.reject();
			} else {
				defer.resolve(data.toString());
			}

		});


	}

	return function (path) {
		var defer = Q.defer();

		nodeJSFetch(defer, path);

		return defer.promise;

	}

});

define('application/resource/server/urlfetch', ['q','request'], function (Q,request) {

	
	

	return function (path) {
		var defer = Q.defer();

		request(path, function (err, data) {
			defer.resolve(data.body, data);
		});

		return defer.promise;
	}

});define('application/router/factory', ['backbone'], function (Backbone) {

	
	var router = new Backbone.Router();

	return function () {
		return router;
	}

});define('application/routes/load', ['resource/fetch'], function (resourceFetch) {

	

	return function () {
		var routesPath = '/config/routes.json';

		return resourceFetch(routesPath);
	}

});define('controller/about/index', ['resource/fetch'], function (resourceFetch) {


	


	return function (route, resourceConfig) {

		return {
			title: 'About'
		};

	}

});define('controller/contact/index', [], function () {


	return function (route, util) {
		return {
			title:'Contact'
		};

	}

});define('controller/home/index', ['resource/fetch','model/FlickrImage'], function (resourceFetch,FlickrImage) {

	
	

	return function (route, resourceConfig) {
		var data = {
			title: 'turissini.io'
		};
		

		return data;

	}

});define('controller/location/show', ['resource/fetch'], function (resourceFetch) {

	

	return function (route, resourceConfig) {
		var resourcePath = '/trips/nashville-tennessee-north-carolina-fall-road-trip/locations/' + route.params.locationSlug;
		var promise = resourceFetch(resourceConfig.tripsDomain + resourcePath);


		promise = promise.then(function (e) {
			var data = {};
			var location = JSON.parse(e);
			var body = '';
			var photo = location.photos[0];
			// nashville
			switch (route.params.locationSlug) {


			case 'nashville-tennessee':
				photo = location.photos[18];
				break;
			case 'lynchburg-tennessee':
				photo = location.photos[9];
				break;
			case 'lookout-mountain-georgie':
				photo = location.photos[0];
				break;
			case 'great-smokey-mountains-national-park':
				photo = location.photos[6];
				break;
			case 'mount-pisgah-north-carolina':
				photo = location.photos[2];
				break;
			case 'grandfather-mountain-north-carolina':
				photo = location.photos[0];
				break;
			case 'blue-ridge-parkway':
				photo = location.photos[11];
				break;
			case 'asheville-north-carolina':
				photo = location.photos[1];
				break;
			case 'grand-ole-opry-nashville-tennessee':
				photo = location.photos[0];
				break;
			}


			
			var heroImage = 'http://farm' + photo.flickr_farm + '.staticflickr.com/' + photo.flickr_server + '/' + photo.flickr_id + '_' + photo.flickr_secret + '_c.jpg';

			location.posts.forEach(function (post) {
				body += post.body;
			});

			data.post = {
				title:location.title,
				summary:'foo',
				body:body,
				hero_image:heroImage
			}

			data.image_panorama_url = data.post.photo_url;
			data.title = data.post.title;


			return data;
		});



		return promise;

	}

});define('controller/posts/nashville', ['resource/fetch'], function (resourceFetch) {

	

	return function (route, resourceConfig) {
		var resourcePath = 'trips/nashville-tennessee-north-carolina-fall-road-trip';

		var promise = resourceFetch(resourceConfig.tripsDomain + resourcePath);

		var tripDistanceSegments = [73.2, 91, 169.7, 96.6, 92.1, 82.5, 294];

		var tripDistance = 0;

		tripDistanceSegments.forEach(function (distance) {
			tripDistance += distance;
		});


		promise = promise.then(function (e) {
			var trip = JSON.parse(e);
			var data = {
				trip: trip,
				tripDistance: tripDistance,
				numLocations: trip.locations.length,
				numStates: 3,
				tripDistanceSegments: tripDistanceSegments
			};

			// nashville
			trip.locations[0].initialPhoto = trip.locations[0].photos.splice(18, 1)[0];
			trip.locations[0].facts = [{
				text:'Population: 624,496'
			},{
				text:'Nickname: Music City'
			},{
				text:'Demonym: Nashvillians'
			},{
				text:'Tennessee State Capital'
			},{
				text:'After drinking a cup of local coffee in Nashville, U.S. president Teddy Roosevelt coined the phrase "good to the last drop!"'
			}];

			// lynchburg
			trip.locations[1].initialPhoto = trip.locations[1].photos.splice(9, 1)[0];
			trip.locations[1].facts = [{
				text:'Population: 5,740'
			},{
				text:'Median cost of a home is less than $100,000'
			},{
				text:'Lynchburg is in a dry county, meaning you cannot buy alcohol anywhere in the county. It is legal, however, to drink alcohol in the county.'
			}];

			//lookout mountain
			trip.locations[2].initialPhoto = trip.locations[2].photos.splice(2, 1)[0];
			trip.locations[2].facts = [{
				text:'Elevation: 2,389 ft'
			},{
				text:'Highest point in Walker County, Georgia'
			},{
				text:'The mountain is the site of the Battle of Lookout Mountain during the Civil War. The battle is nicknamed the "Battle Above the Clouds", a reference to the unique way fog settles around the mountain.'
			}];

			//smokey mountains
			trip.locations[3].initialPhoto = trip.locations[3].photos.splice(6, 1)[0];
			trip.locations[3].facts = [{
				text:'Area: 522,419 acres'
			},{
				text:'Annual Visitors: 9,008,830'
			},{
				text:'Most visited national park in the United States'
			},{
				text:'UNESCO World Heritage Site'
			}];

			//pisgah inn
			trip.locations[4].initialPhoto = trip.locations[4].photos.splice(2, 1)[0];
			trip.locations[4].facts = [{
				text:'Elevation: 5,721 ft'
			},{
				text:'Atop of mountain is the highest television antenna east of the Mississippi River (6,023 ft)'
			}];

			//grandfather mountain
			trip.locations[5].initialPhoto = trip.locations[5].photos.splice(0, 1)[0];
			trip.locations[5].facts = [{
				text:'Elevation: 5,946 ft'
			},{
				text:'Four peaks are located on the mountain\s main ridge: Calloway Peak (5,964 ft.), Attic Window Peak (5,949 ft.), MacRae Peak (5,844 ft.), and Linville Peak (5,295 ft.)'
			},{
				text:'Part of Forrest Gump was filmed on the road to the summit.'
			}];

			//blue ridge parkway
			trip.locations[6].initialPhoto = trip.locations[6].photos.splice(11, 1)[0];
			trip.locations[6].facts = [{
				text:'Road length: 469 miles'
			},{
				text:'Number of counties: 29 (2 States, North Carolina and Virginia)'
			},{
				text:'Connects Great Smokey Mountains National Park and Shenandoah National Park'
			},{
				text:'Annual number of visitors: over 17,000,000'
			}];

			//asheville
			trip.locations[7].initialPhoto = trip.locations[7].photos.splice(1, 1)[0];
			trip.locations[7].facts = [{
				text:'Population: 83,393'
			},{
				text:'Incorporated: 1797'
			},{
				text:'Demonym: Ashevillian'
			},{
				text:'County: Buncombe'
			}];

			//grand old opry
			trip.locations[8].initialPhoto = trip.locations[8].photos.splice(0, 1)[0];
			trip.locations[8].facts = [{
				text:'Longest running radio show in United States (88 years)'
			},{
				text:'Broadcast on 650/WSM, WSM website, Sirius-XM Radio'
			},{
				text:'First broadcast was November 28, 1925'
			},{
				text:'Show was performed in the Ryman Auditorium until 1974, where it was moved to the Gaylord Opryland Resort.'
			}];

			trip.locations.forEach(function (location, index) {
				if (index < 3 || index === trip.locations.length - 1) {
					location.position = 'right';
				} else {
					location.position = 'left';
				}
			});

			data.title = 'Trip report for Nashville, Tennessee and North Carolina Autumn - turissini.io';


			return data;
			
		});



		return promise;

	}

});define('controller/posts/show', ['resource/fetch'], function (resourceFetch) {

	

	return function (route, resourceConfig) {
		var resourcePath = 'trips/' + route.params.postSlug;

		var promise = resourceFetch(resourceConfig.tripsDomain + resourcePath);


		promise = promise.then(function (e) {
			var data = {};
			data.post = JSON.parse(e);

			data.image_panorama_url = data.post.photo_url;
			data.title = data.post.title;


			return data;
		});



		return promise;

	}

});define('element/layout/ResponsiveImage', [], function () {

	function ResponsiveImage (element, options) {
		this._element = element;
		this.options = options || {};
	};

	ResponsiveImage.prototype = {

		reflow: function () {
			this._element.css({
				height:'auto'
			});
			
			if (this._element.height() > this.options.maxHeight) {
				this._element.css({
					height:this.options.maxHeight + 'px'
				})
			}
		}

	};

	return ResponsiveImage;

});define('element/loadStylesheet', ['q','jQuery'], function (Q,jQuery) {

	
	

	return function loadStylesheet (url) {
		var defer = Q.defer();
		var linkTag = document.createElement('link');
		linkTag.setAttribute('rel', 'stylesheet');
		linkTag.setAttribute('type', 'text/css');

		jQuery(linkTag).on('load', defer.resolve.bind(defer));
		linkTag.setAttribute('href', url);
		document.head.appendChild(linkTag);

		return defer.promise;
	};

});define('element/observer/linkClick', ['jQuery'], function (jQuery) {
	

	var defaultBehavior = 'replace';

	function navigate (router, e) {
		var behavior = e.target.getAttribute('data-behavior');
		var navigationOptions = {
			trigger:true
		}

		if (behavior === 'ignore') {
			return;
		}

		e.preventDefault();

		if (!behavior) {
			behavior = defaultBehavior;
		}

		navigationOptions[behavior] = true;
		
		router.navigate(e.currentTarget.getAttribute('href'), navigationOptions)
	}

	return function (router) {
		var boundNavigate = navigate.bind(undefined, router);
		jQuery(document).on('click', 'a:not([href^=http]), a:not([data-router="ignore"])', boundNavigate);
	}


});define('element/responsive/windowDimensions', ['jQuery'], function (jQuery) {

	
	var dimensions = {}
	
	function refresh() {

		dimensions.windowHeight = window.innerHeight;
		dimensions.windowWidth = window.innerWidth;

	};

	refresh();

	jQuery(window).on('resize', refresh.bind(undefined));

	return dimensions;

});define('googleMaps/bounds/fromLatLngList', [], function () {



	return function fromLatLngList (latLngArray) {
		var bounds = new google.maps.LatLngBounds();

		latLngArray.forEach(function (latLng) {
			bounds = bounds.extend(latLng);
		});

		return bounds;

	};


});define('googleMaps/overlay/Label', ['jQuery'], function (jQuery) {

	

	function Label (text, options) {
		this._text = text;
		this._element = jQuery('<span class="maps-label"></span>');
		this.options = options || {};
		
	};

	var proto = Label.prototype = new google.maps.OverlayView();


	proto.onAdd = function () {
		this._element.html(this._text);
	};


	proto.getElement = function () {
		return this._element;
	};


	proto.setPoint = function (point) {
		this._point = point;
	};


	proto.getPoint = function () {
		return this._point;
	};


	proto.draw = function () {
		var panes = this.getPanes();
		var projection = this.getProjection();
		var pixels = projection.fromLatLngToDivPixel(this.getPoint());
		var offsetTop = this.options.offsetTop || 0;
		var offsetLeft = this.options.offsetLeft || 0;

		this._element.appendTo(panes.floatPane);
		this._element.css({
			position:'absolute',
			left:pixels.x - (this._element.width() / 2) + offsetLeft + 'px',
			top:pixels.y + offsetTop + 'px'
		});


	};


	proto.onRemove = function () {
		this._element.remove();
	};
	


	return Label;

});define('interactive/about/index', [], function () {


	return {
		load: function (data) {
			
			
		},

		unload: function () {
			
		}
	};

});define('interactive/contact/index', [], function () {


	return {
		load: function (data) {
			
		},

		unload: function () {

		}
	};

});define('interactive/home/index', ['jQuery'], function (jQuery) {

	
	window.images = {};

	window.serializeImages = function () {
		var array = [];
		jQuery('img.selected').each(function (index, el) {
			array.push(window.images[el.id]);
		})


		return array;
	}

	function loadPhotos (photosetId) {
		return jQuery.ajax({
			url:'http://api.flickr.com/services/rest/',
			data: {
				api_key:'951c0814caade8b4fc2b381778269126',
				user_id:'58487569@N06',
				method:'flickr.photosets.getPhotos',
				photoset_id:photosetId,
				format:'json'
			},
			dataType:'jsonp',
			jsonpCallback:'jsonFlickrApi'

		})
	};


	return {
		load: function (data) {
			/*
			jQuery.ajax({
				url:'http://api.flickr.com/services/rest/',
				data: {
					api_key:'951c0814caade8b4fc2b381778269126',
					user_id:'58487569@N06',
					method:'flickr.photosets.getList',
					format:'json'
				},
				dataType:'jsonp',
				jsonpCallback:'jsonFlickrApi',
				success:function (e) {
					var photoSets = e.photosets.photoset;

					photoSets.forEach(function (set) {
						var el = jQuery('<div></div>');

						el.text(set.title._content);

						jQuery(document.body).append(el);

						el.on('click', function () {
							loadPhotos(set.id)
								.then(function (e) {
									var photos = e.photoset.photo;
									console.log(photos)
									jQuery(document.body).empty();

									photos.forEach(function (photo, index) {
										var id = 'photo' + index;
										var img = jQuery('<img id="' + id + '" />');
										img.attr({
											src:'http://farm' + photo.farm + '.staticflickr.com/' + photo.server + '/' + photo.id + '_' + photo.secret + '_b.jpg'
										});

										img.css({
											width:'400px'
										});

										img.appendTo(document.body);
										window.images[id] = photo;

										img.on('click', function () {
											img.toggleClass('selected');
										});

									});



								})

						});

					});
				}
			})

			*/

		},

		unload: function () {

		}
	};

});define('interactive/location/show', [], function () {


	return {
		load: function (data) {
			
		},

		unload: function () {

		}
	};

});define('interactive/posts/nashville', ['q','jQuery','underscore','googleMaps/overlay/Label','element/loadStylesheet','googleMaps/bounds/fromLatLngList','interactive/posts/nashville/map/loadCarData','interactive/posts/nashville/card/initialize','interactive/posts/nashville/card/expandHandler','interactive/posts/nashville/card/collapseHandler','element/responsive/windowDimensions','interactive/posts/nashville/map/builder','interactive/posts/nashville/map/kmlBuilder','interactive/posts/nashville/map/markersBuilder','interactive/posts/nashville/map/mergeData','interactive/posts/nashville/parallax/Timeline','interactive/posts/nashville/scroll/handlerBuilder'], function (Q,jQuery,_,GoogleMapsLabel,loadStylesheet,googleMapsBoundsFromLatLng,loadCarData,cardInitialize,expandCardHandler,collapseCardHandler,responsiveDimensions,mapBuilder,kmlBuilder,markersBuilder,mapDataMerge,Timeline,scrollHandlerBuilder) {

	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	

	
	
	
	
	var map;
	var kml;
	var onScroll;
	var onKeyDown;
	var onCardLinkClick;
	var onClickExpand;
	var onClickCollapse;
	var timeline;
	var cards;
	var jqBody;


	return {

		load: function (data, htmlContext) {
			jqBody = jQuery(document);
			var blogContent = jQuery('#blog-content', htmlContext);
			var scrollToContinue = jQuery('<div id="scroll-to-continue" class="scroll-to-continue vert-bottom text-white text-center">Scroll to take a drive<span class="caret">^</span><span class="caret">^</span></div>');

			
			jQuery('html').addClass('map');
			blogContent.prepend('<div id="map" class="google-map"></div>');
			blogContent.addClass('fixed-full');
			jQuery('#content').addClass('fixed-full');

			jQuery('#blog-header', htmlContext).addClass('full-height fixed-full');
			jQuery('#blog-header .text', htmlContext).addClass('vert-one-quarter');

			jQuery('#intro', htmlContext).remove();

			jQuery('<div class="scroll"></div>').insertBefore(blogContent);
			scrollToContinue.appendTo(blogContent);

			jQuery('.trip-location', htmlContext).each(function (idx, elem) {
				var cardEl = jQuery('<div class="card"></div>');
				var location = data.trip.locations[idx];
				var cardLink = jQuery('<a href="/posts/' + data.trip.slug + '/' + location.slug + '" data-behavior="ignore" class="card-link"></a>');
				var el = jQuery(elem);
				el.addClass('full-height transparent fixed-full');
				el.removeClass('clear-fix');
				cardEl.append(el.children()).appendTo(el);
				cardEl.append(cardLink);

			});

		},


		afterAppend: function (data, htmlContext) {
			var promises = [];
			var defer = Q.defer();

			var nashville = data.trip;
			var distanceSegments = data.tripDistanceSegments;
			var locationMarkers = [];
			var markers = markersBuilder(nashville.locations);
			var latLngs = _.map(markers, function (marker) {
				return marker.getPosition();
			});

			var bounds = googleMapsBoundsFromLatLng(latLngs);
			var center = bounds.getCenter();

			map = mapBuilder(jQuery('#map', htmlContext).get(0), {
				center:center
			});





			google.maps.event.addListenerOnce(map, 'tilesloaded', function () {
				jQuery('html').addClass('map-ready');
				jQuery('#content').removeClass('fixed-full');
				defer.resolve();
			});


			promises.push(defer.promise);


			locationMarkers = mapDataMerge(markers, center);
				


			kml = kmlBuilder(nashville.maps[0].url);
			cards = cardInitialize(jQuery('.trip-location', htmlContext));

			if (responsiveDimensions.windowWidth <= 856) {
				google.maps.event.addListenerOnce(kml, 'defaultviewport_changed', function () {
					if (kml.getStatus() === 'OK') {
						map.fitBounds(kml.getDefaultViewport());
					}
				});
			}

			var carPromise = loadCarData().then(function (carSegments) {
				timeline = new Timeline(map, locationMarkers, distanceSegments, kml, carSegments);

				onScroll = scrollHandlerBuilder(timeline);
				onClickCollapse = collapseCardHandler.bind(undefined, cards);
				onClickExpand = expandCardHandler.bind(undefined, cards);
				onKeyDown = function (e) {
					if (e.keyCode === 27) {
						cards.forEach(function (card) {
							card.collapse();
						});
					}
				}

				onCardLinkClick = function (e) {
					e.preventDefault();
				};

				jqBody.on('scroll', onScroll);
				jqBody.on('click', '.trip-location:not(.expanded)', onClickExpand);
				jqBody.on('keyup', onKeyDown);

				jqBody.on('click', '.card-link', onCardLinkClick);


			});


			promises.push(carPromise);

			return Q.all(promises);

		},

		unload: function () {
			map = null;
			jqBody.off('scroll', onScroll);
			jqBody.off('click', onClickCollapse);
			jqBody.off('click', onClickExpand);
			jqBody.on('click', onCardLinkClick);
			jqBody.off('keyup', onKeyDown);
			onScroll = null;
			onClickCollapse = null;
			onClickExpand = null;
			kml = null;
			timeline = null;


			cards.forEach(function (card) {
				card.collapse();
			});



			cards = null;
		},

		afterRemove: function () {
			jQuery('html').removeClass('map-ready');
			jQuery('html').removeClass('map');
		}

	};

});define('interactive/posts/nashville/card/Card', ['Galleria','element/responsive/windowDimensions','q','element/layout/ResponsiveImage','interactive/posts/nashville/galleria/builder'], function (Galleria,dimensions,Q,ResponsiveImage,galleriaBuilder) {

	
	
	var jqBody = jQuery(document.body);
	
	
	

	var galleriaOptions = {
		imagePosition:'center',
		imageCrop:false,
		thumbnailCrop:false,
		initialTransition:false,
		showCounter:false,
		debug:false
	};

	function Card (id, el, options) {
		this._element = el;
		this.id = id;
		this._cardElement = jQuery('.card', this._element);
		this._headerElement = jQuery('.header', this._element);
		this._isExpanded = false;

		this._minimizedImageHeight = jQuery('.image', this._element).height();
	};


	var proto = Card.prototype = {

		_resize:null,
		_boundCollapse:null,

		minimizedImageHeight: function () {
			return this._minimizedImageHeight;
		},

		isExpanded: function () {
			return this._isExpanded;
		},

		expand: function (imageWidth, imageHeight) {
			var defer = Q.defer();
			var ratio = 531 / 800;
			

			this._isExpanded = true;
			jqBody.css({
				overflow:'hidden'
			});

			this._element.addClass('expanded');
			var width = this._cardElement.width();
			var height = width * ratio;

			if (height > dimensions.windowHeight * 0.8) {
				height = dimensions.windowHeight * 0.8;
			}

			galleriaOptions.width = width;
			galleriaOptions.height = height;

			jQuery('#blog-content').css({
				overflow:'auto'
			});

			this._resize = function () {
				
				this._cardElement.get(0).offsetHeight;
				var width = this._cardElement.width();
				var height = width * ratio;

				if (height > dimensions.windowHeight * 0.8) {
					height = dimensions.windowHeight * 0.8;
				}

				var galleria = jQuery('.images', this._element).data('galleria');

				window.setTimeout(function () {
					galleria.resize({
						width:width,
						height:height
					})
				}, 100);

			}.bind(this);
			jQuery(window).on('resize', this._resize);

			galleriaBuilder(jQuery('.images', this._element), galleriaOptions, '../../vendor/galleria/themes/classic/galleria.classic.min.js')
			
			this._boundClickCollapse = function (e) {
				if (e.target !== this._element.get(0)) {
					return;
				}

				e.stopPropagation();
				this.collapse();
			}.bind(this);
			this._element.bind('click', this._boundClickCollapse);

			return defer.promise;

		},

		collapse: function () {
			var defer = Q.defer();
			var galleria = jQuery('.images', this._element).data('galleria');
			jqBody.css({
				overflow:'auto'
			});
			
			jQuery('#blog-content').css({
				overflow:'inherit'
			});
			
			this._element.unbind('click', this._boundClickCollapse);
			this._boundClickCollapse = null;

			this._element.removeClass('expanded');
			jQuery(window).off('resize', this._resize);

			if(galleria && typeof galleria.destroy === 'function') {
				galleria.destroy();
			}


			this._isExpanded = false;
			defer.resolve();

			return defer.promise;
		}

	};

	Object.defineProperties(proto, {
		'element': {
			get: function () {
				return this._element;
			},

			set: function (el) {
				this._element = el;
			}
		}
	})

	return Card;

});define('interactive/posts/nashville/card/collapseHandler', ['jQuery','interactive/posts/nashville/card/getCardById'], function (jQuery,getCardById) {

	
	
	

	return function (cards, evt) {
		var blogSection = jQuery(evt.target).parents('.trip-location');
		var id = blogSection.attr('id');
		var card = getCardById(id, cards);

		window.requestAnimationFrame(function () {
			if (card.isExpanded()) {
				card.collapse()
			}

		});
		
	}


});define('interactive/posts/nashville/card/expandHandler', ['jQuery','interactive/posts/nashville/card/getCardById'], function (jQuery,getCardById) {

	
	

	return function (cards, evt) {
		var blogSection = jQuery(evt.currentTarget);
		
		var id = blogSection.attr('id');
		var card = getCardById(id, cards);

		window.requestAnimationFrame(function () {

			if (!card.isExpanded()) {
				card.expand();
			}
		});

	}


});define('interactive/posts/nashville/card/getCardById', [], function () {

	return function getCardById (id, cards) {
		var match;
		cards.forEach(function (card) {
			if (card.id === id) {
				match = card;
			}
		});

		return match;
	};


});define('interactive/posts/nashville/card/initialize', ['interactive/posts/nashville/card/Card'], function (Card) {

	

	return function (elements) {
		var cards = [];

		elements.each(function (index, el) {
			var element = jQuery(el);
			var card = new Card(element.attr('id'), element);
			cards.push(card);
		});

		return cards;
	}

});define('interactive/posts/nashville/galleria/builder', ['Galleria','jQuery','element/responsive/windowDimensions'], function (Galleria,jQuery,dimensions) {

	
	
	

	var loadedThemes = {};



	return function (sectionEls, options, themeUrl) {
		if (loadedThemes[themeUrl] !== true) {
			Galleria.loadTheme(themeUrl);
			loadedThemes[themeUrl] = true;
		}

		sectionEls.each(function (idx, el) {
			Galleria.run(jQuery(el), options);
		});

	};

});define('interactive/posts/nashville/map/Car', ['jQuery'], function (jQuery) {

	

	function Car (imagePath, map) {
		this._imagePath = imagePath;
		this._map = map;
		this._position = null;

	};
	

	var proto = Car.prototype = new google.maps.OverlayView();


	proto.onAdd = function () {
		this._element = jQuery('<img class="marker-car" />');
		this._element.attr({
			src:this._imagePath
		});

		this._element.css({
			position:'absolute'
		});

		var panes = this.getPanes();
		this._element.appendTo(panes.floatPane);

	};


	proto.getElement = function () {
		return this._element;
	};


	proto.setPosition = function (latLng) {
		var overlayProjection = this.getProjection();
		this._position = latLng;
		if (!overlayProjection || !this._element) {
			return;
		}

		var position = overlayProjection.fromLatLngToDivPixel(latLng);

		var left = position.x - this._element.width() / 2;
		var top = position.y - this._element.height() / 2;

		this._element.css({
			left:left + 'px',
			top:top + 'px'
		});
	};


	proto.driving = function () {
		if (this._element) {
			this._element.addClass('driving');
		}
	};


	proto.parked = function () {
		if (this._element) {
			this._element.removeClass('driving');
		}
	};


	proto.getPosition = function () {
		return this._position;
	};


	proto.draw = function () {
		var overlayProjection = this.getProjection();

	};


	proto.onRemove = function () {
		this._element.remove();
	};


	return Car;

});define('interactive/posts/nashville/map/addMarkerClick', [], function () {

	return function (locationData, targetScroll) {

		if (locationData.handlerAdded !== true) {
			locationData.handlerAdded = true;
			google.maps.event.addListener(locationData.marker, 'click', window.scrollTo.bind(window, 0, targetScroll));
		}

	}

});define('interactive/posts/nashville/map/builder', [], function () {

	var defaultMapOptions = {
		zoom:8,
		draggable:false,
		scrollwheel:false,
		disableDefaultUI:true,
		disableDoubleClickZoom:true,
		styles:[
		  {
		    "featureType": "landscape",
		    "stylers": [
		      { "hue": "#2bff00" },
		      { "saturation": 33 },
		      { "lightness": 100 },
		      { "color": "#f6f4ef" }
		    ]
		  },{
		    "featureType": "road",
		    "elementType": "geometry",
		    "stylers": [
		      { "weight": 0.3 },
		      { "color": "#afabbe" }
		    ]
		  },{
		    "elementType": "labels",
		    "stylers": [
		      { "visibility": "on" }
		    ]
		  },{
		    "featureType": "water",
		    "stylers": [
		      { "saturation": -39 },
		      { "color": "#8ccccc" }
		    ]
		  },{
		  },{
		  },{
		  }
		]
	};

	return function (el, options) {

		var mapOptions = _.extend(defaultMapOptions, options);

		return new google.maps.Map(el, mapOptions);
	}

});define('interactive/posts/nashville/map/kmlBuilder', [], function () {

	return function (url) {
		
		return new google.maps.KmlLayer({
			url:url,
			preserveViewport:true,
			screenOverlays:false,
			clickable:false
		});
	}

});define('interactive/posts/nashville/map/loadCarData', ['resource/fetch'], function (resourceFetch) {

	

	return function () {

		return resourceFetch('/kml/nashvilletolynchburg.kml')

			.then(function (e) {
				var xml = jQuery(e);
				var coordinateElems = jQuery('coordinates', xml);
				var coords = [];

				coordinateElems.each(function (index, elem) {
					var tripLeg = [];
					
					var innerCoords = elem.innerHTML.split('\n');

					innerCoords.forEach(function (innerCoord) {
						var split = innerCoord.split(',');
						var latitude = split[1];
						var longitude = split[0];

						if (!latitude || !longitude) {
							return;
						}

						var latLng = new google.maps.LatLng(latitude, longitude);

						tripLeg.push(latLng);

					});

					coords.push(tripLeg);

				});


				return coords;

			});

	};

});define('interactive/posts/nashville/map/markersBuilder', [], function () {

	return function (locations) {
		var markers = [];

		locations.forEach(function (locationData) {
			var latLng = new google.maps.LatLng(locationData.latitude, locationData.longitude);
			var marker = new google.maps.Marker({
				position:latLng
			});

			markers.push(marker);

		});

		return markers;
		
	}

});define('interactive/posts/nashville/map/mergeData', [], function () {

	return function (markers, center) {
		var locationMarkers = [];

		markers.forEach(function (marker) {
			locationMarkers.push({
				marker:marker,
				latLng:marker.getPosition()
			});
		});

		locationMarkers.unshift({
			latLng:center
		});

		return locationMarkers;
	}

});define('interactive/posts/nashville/parallax/Timeline', ['jQuery','parallax/calculate','interactive/posts/nashville/parallax/parallaxSection','interactive/posts/nashville/parallax/panMap','interactive/posts/nashville/parallax/updateOdometer','interactive/posts/nashville/map/addMarkerClick','interactive/posts/nashville/map/Car','interactive/posts/nashville/parallax/driveCar','element/responsive/windowDimensions'], function (jQuery,calculateParallax,parallaxSection,panMap,updateOdometer,addMarkerClick,Car,driveCar,responsiveDimensions) {

	
	
	
	
	
	

	
	

	

	var blogContent = jQuery('#blog-content');
	var blogHeader = jQuery('#blog-header');
	var blogHeaderText;
	var blogHeaderOffset = blogHeader.offset();
	var scrollToContinue;

	var dashboardEl = jQuery('#dashboard');

	var nashvilleEl = jQuery('#nashville-tennessee');
	var lynchburgEl = jQuery('#lynchburg-tennessee');
	var lookOutMountainEl = jQuery('#lookout-mountain-georgia');
	var smokeyMountainsEl = jQuery('#great-smokey-mountains-national-park');
	var mtPisgahEl = jQuery('#pisgah-inn-north-carolina');
	var grandfatherMountainEl = jQuery('#grandfather-mountain-north-carolina');
	var blueRidgeParkwayEl = jQuery('#blue-ridge-parkway');
	var ashevilleEl = jQuery('#asheville-north-carolina');
	var grandOleOpryEl = jQuery('#grand-ole-opry-nashville-tennessee');

	var markersAdded;


	function fetchElements() {
		blogContent = jQuery('#blog-content');
		blogHeader = jQuery('#blog-header');
		blogHeaderOffset = blogHeader.offset();
		blogHeaderText = jQuery('.text', blogHeader);
		scrollToContinue = jQuery('#scroll-to-continue');

		dashboardEl = jQuery('#dashboard');

		nashvilleEl = jQuery('#nashville-tennessee');
		lynchburgEl = jQuery('#lynchburg-tennessee');
		lookOutMountainEl = jQuery('#lookout-mountain-georgia');
		smokeyMountainsEl = jQuery('#great-smokey-mountains-national-park');
		mtPisgahEl = jQuery('#pisgah-inn-north-carolina');
		grandfatherMountainEl = jQuery('#grandfather-mountain-north-carolina');
		blueRidgeParkwayEl = jQuery('#blue-ridge-parkway');
		ashevilleEl = jQuery('#asheville-north-carolina');
		grandOleOpryEl = jQuery('#grand-ole-opry-nashville-tennessee');

		markersAdded = false;
	}


	function sumDistances (distanceSegments, startIndex, stopIndex) {
		var sum = 0;

		for(var i = startIndex; i <= stopIndex; i += 1) {
			sum += distanceSegments[i];
		}

		return sum;
	};

	function advanceTimeline (scrollY, map, locations, distanceSegments, kml, carSegments, carMarker) {
		if (scrollY < 0) {
			scrollY = 0;
		}


		calculateParallax(

			[{
				name:'opacity',
				from:1, 
				to:0, 
				scrollStart:0, 
				scrollDistance:responsiveDimensions.windowHeight,
				fill:'both'
			}], 

			scrollY, 

			function (e) {
				var styles = {
					opacity:e.props.opacity.value,
					display:'block'
				}

				if (styles.opacity === 0) {
					styles.display = 'none';
				}

				blogHeaderText.css(styles);
				scrollToContinue.css(styles);

				
			}

		);



		calculateParallax(

			[{
				name:'opacity',
				from:1, 
				to:0, 
				scrollStart:responsiveDimensions.windowHeight, 
				scrollDistance:responsiveDimensions.windowHeight,
				fill:'both'
			}], 

			scrollY, 

			function (e) {
				var styles = {
					opacity:e.props.opacity.value,
					display:'block'
				};

				if (styles.opacity === 0) {
					styles.display = 'none';
				}


				blogHeader.css(styles);
			}

		);

		calculateParallax(

			[{
				name:'markers',
				from:0, 
				to:1, 
				scrollStart:responsiveDimensions.windowHeight, 
				scrollDistance:1,
				fill:'both'
			}], 

			scrollY, 

			function (e) {
				if (e.props.markers.value === 1 && markersAdded === false) {
					map.setOptions({
						//mapTypeId:google.maps.MapTypeId.HYBRID
					});
					
					kml.setMap(map);

					locations.forEach(function (location) {
						if (location.marker) {
							location.marker.setIcon('https://s3.amazonaws.com/traveladdict/images/maps/map_tack.png');
							location.marker.setMap(map);
						}
					});

					markersAdded = true;
				} else if (e.props.markers.value === 0 && markersAdded === true) {
					kml.setMap(null);
					map.setOptions({
						//mapTypeId:google.maps.MapTypeId.SATELLITE
					});

					locations.forEach(function (location) {
						if (location.marker) {
							location.marker.setMap(null);
						}
					});

					markersAdded = false;
				}
			}

		);
		


		panMap(map, locations[0], locations[1], responsiveDimensions.windowHeight, 1, 'both', scrollY, 0, 0);


		calculateParallax(

			[{
				name:'opacity',
				from:0, 
				to:1, 
				scrollStart:responsiveDimensions.windowHeight * 2, 
				scrollDistance:responsiveDimensions.windowHeight,
				fill:'both'
			}], 

			scrollY, 

			function (e) {

				dashboardEl.css({
					opacity:e.props.opacity.value
				})
			}

		);


		calculateParallax(

			[{
				name:'top',
				from:responsiveDimensions.windowHeight / 4, 
				to:0, 
				scrollStart:responsiveDimensions.windowHeight * 3, 
				scrollDistance:responsiveDimensions.windowHeight,
				fill:'both'
			},{
				name:'right',
				from:responsiveDimensions.windowWidth / 2, 
				to:10, 
				scrollStart:responsiveDimensions.windowHeight * 3, 
				scrollDistance:responsiveDimensions.windowHeight,
				fill:'both'
			},{
				name:'x',
				from:50, 
				to:0, 
				scrollStart:responsiveDimensions.windowHeight * 3, 
				scrollDistance:responsiveDimensions.windowHeight,
				fill:'both'
			},{
				name:'scale',
				from:1.8, 
				to:1, 
				scrollStart:responsiveDimensions.windowHeight * 3, 
				scrollDistance:responsiveDimensions.windowHeight,
				fill:'both'
			}], 

			scrollY, 

			function (e) {
				dashboardEl.css({
					transform:'scale(' + e.props.scale.value + ') translateY(' + e.props.top.value + 'px) translateZ(0)'
				})
			}

		);

		calculateParallax(

			[{
				name:'car',
				from:0, 
				to:1, 
				scrollStart:responsiveDimensions.windowHeight * 4, 
				scrollDistance:responsiveDimensions.windowHeight,
				fill:'both'
			}], 

			scrollY, 

			function (e) {
				if(e.props.car.value > 0 && !carMarker.getMap()) {
					carMarker.setMap(map);
				} else if (e.props.car.value <= 0 && carMarker.getMap()) {
					carMarker.setMap(null);
				}
			}

		);

		addMarkerClick(locations[1], responsiveDimensions.windowHeight * 5);

		parallaxSection(nashvilleEl, {
			top:responsiveDimensions.windowHeight * 4.5
		}, scrollY, responsiveDimensions.windowHeight, locations[1].marker, map);


		/* Lynchburg */
		panMap(map, locations[1], locations[2], responsiveDimensions.windowHeight * 5, responsiveDimensions.windowHeight * 4, 'forwards', scrollY, 0, distanceSegments[0]);
		driveCar(carSegments[0], carMarker, responsiveDimensions.windowHeight * 5, responsiveDimensions.windowHeight * 4, 'both', scrollY);
		addMarkerClick(locations[2], responsiveDimensions.windowHeight * 9);
		updateOdometer(map, locations[1], locations[2], responsiveDimensions.windowHeight * 5, responsiveDimensions.windowHeight * 4, 'both', scrollY, 0, distanceSegments[0]);


		parallaxSection(lynchburgEl, {
			top:responsiveDimensions.windowHeight * 8.5
		}, scrollY, responsiveDimensions.windowHeight, locations[2].marker, map);


		/* Lookout Mountain */
		panMap(map, locations[2], locations[7], responsiveDimensions.windowHeight * 9, responsiveDimensions.windowHeight * 20, 'forwards', scrollY, distanceSegments[0], distanceSegments[1]);
		driveCar(carSegments[1], carMarker, responsiveDimensions.windowHeight * 9, responsiveDimensions.windowHeight * 4, 'forwards', scrollY);
		addMarkerClick(locations[3], responsiveDimensions.windowHeight * 13);
		updateOdometer(map, locations[2], locations[3], responsiveDimensions.windowHeight * 9, responsiveDimensions.windowHeight * 4, 'forwards', scrollY, distanceSegments[0], distanceSegments[1]);

		parallaxSection(lookOutMountainEl, {
			top:responsiveDimensions.windowHeight * 12.5
		}, scrollY, responsiveDimensions.windowHeight, locations[3].marker, map);


		/* Smokey Mountains */
		driveCar(carSegments[2], carMarker, responsiveDimensions.windowHeight * 13, responsiveDimensions.windowHeight * 4, 'forwards', scrollY);
		addMarkerClick(locations[4], responsiveDimensions.windowHeight * 17);
		updateOdometer(map, locations[3], locations[4], responsiveDimensions.windowHeight * 13, responsiveDimensions.windowHeight * 4, 'forwards', scrollY, sumDistances(distanceSegments, 0, 1), distanceSegments[2]);

		parallaxSection(smokeyMountainsEl, {
			top:responsiveDimensions.windowHeight * 16.5
		}, scrollY, responsiveDimensions.windowHeight, locations[4].marker, map);


		/* PISGAH */
		driveCar(carSegments[3], carMarker, responsiveDimensions.windowHeight * 17, responsiveDimensions.windowHeight * 4, 'forwards', scrollY);
		addMarkerClick(locations[5], responsiveDimensions.windowHeight * 21);
		updateOdometer(map, locations[4], locations[5], responsiveDimensions.windowHeight * 17, responsiveDimensions.windowHeight * 4, 'forwards', scrollY, sumDistances(distanceSegments, 0, 2), distanceSegments[3]);

		parallaxSection(mtPisgahEl, {
			top:responsiveDimensions.windowHeight * 20.5
		}, scrollY, responsiveDimensions.windowHeight, locations[5].marker, map);


		/* Grandfather Mountain */
		driveCar(carSegments[4], carMarker, responsiveDimensions.windowHeight * 21, responsiveDimensions.windowHeight * 4, 'forwards', scrollY);
		addMarkerClick(locations[6], responsiveDimensions.windowHeight * 25);
		updateOdometer(map, locations[5], locations[6], responsiveDimensions.windowHeight * 21, responsiveDimensions.windowHeight * 4, 'forwards', scrollY, sumDistances(distanceSegments, 0, 3), distanceSegments[4]);

		parallaxSection(grandfatherMountainEl, {
			top:responsiveDimensions.windowHeight * 24.5
		}, scrollY, responsiveDimensions.windowHeight, locations[6].marker, map);


		/* Blue Ridge Parkway */
		driveCar(carSegments[5], carMarker, responsiveDimensions.windowHeight * 25, responsiveDimensions.windowHeight * 4, 'forwards', scrollY);
		addMarkerClick(locations[7], responsiveDimensions.windowHeight * 29);
		updateOdometer(map, locations[6], locations[7], responsiveDimensions.windowHeight * 25, responsiveDimensions.windowHeight * 4, 'forwards', scrollY, sumDistances(distanceSegments, 0, 4), distanceSegments[5]);

		parallaxSection(blueRidgeParkwayEl, {
			top:responsiveDimensions.windowHeight * 28.5
		}, scrollY, responsiveDimensions.windowHeight, locations[7].marker, map);


		/* Asheville */
		panMap(map, locations[7], locations[8], responsiveDimensions.windowHeight * 29, responsiveDimensions.windowHeight * 4, 'forwards', scrollY, sumDistances(distanceSegments, 0, 4) + distanceSegments[5] / 2, distanceSegments[5] / 2);
		driveCar(carSegments[6], carMarker, responsiveDimensions.windowHeight * 29, responsiveDimensions.windowHeight * 4, 'forwards', scrollY);
		addMarkerClick(locations[8], responsiveDimensions.windowHeight * 33);
		updateOdometer(map, locations[7], locations[8], responsiveDimensions.windowHeight * 29, responsiveDimensions.windowHeight * 4, 'forwards', scrollY, sumDistances(distanceSegments, 0, 4) + distanceSegments[5] / 2, distanceSegments[5] / 2);

		parallaxSection(ashevilleEl, {
			top:responsiveDimensions.windowHeight * 32.5
		}, scrollY, responsiveDimensions.windowHeight, locations[8].marker, map);


		/* Grand Ole Opry */
		panMap(map, locations[8], locations[9], responsiveDimensions.windowHeight * 33, responsiveDimensions.windowHeight * 16, 'forwards', scrollY, sumDistances(distanceSegments, 0, 5), distanceSegments[6]);
		driveCar(carSegments[7], carMarker, responsiveDimensions.windowHeight * 33, responsiveDimensions.windowHeight * 16, 'forwards', scrollY);
		addMarkerClick(locations[9], responsiveDimensions.windowHeight * 49);
		updateOdometer(map, locations[8], locations[9], responsiveDimensions.windowHeight * 33, responsiveDimensions.windowHeight * 16, 'forwards', scrollY, sumDistances(distanceSegments, 0, 5), distanceSegments[6]);

		parallaxSection(grandOleOpryEl, {
			top:responsiveDimensions.windowHeight * 48.5
		}, scrollY, responsiveDimensions.windowHeight, locations[9].marker, map);


	};

	function Timeline (map, locations, distanceSegments, kml, carSegments) {
		this.map = map;
		this.locations = locations;
		this.distanceSegments = distanceSegments;
		this.kml = kml;
		this.carSegments = carSegments;
		this.carMarker = new Car('http://turissini.io.s3.amazonaws.com/images/car.png', map);
		fetchElements();
	};


	Timeline.prototype = {
		advance: function (scrollY) {
			advanceTimeline(scrollY, this.map, this.locations, this.distanceSegments, this.kml, this.carSegments, this.carMarker);
		}
	};

	return Timeline;

});define('interactive/posts/nashville/parallax/driveCar', ['parallax/calculate'], function (calculateParallax) {

	

	return function (carSegments, carMarker, scrollStart, scrollDistance, fill, scrollY) {

		calculateParallax(

			[{
				name:'car',
				from:0, 
				to:carSegments.length - 1, 
				scrollStart:scrollStart, 
				scrollDistance:scrollDistance,
				fill:fill
			}], 

			scrollY, 

			function (e) {
				var index;
				var carLatLng;
				var length = carSegments.length;
				var min = (length * 0.05);
				var max = (length * 0.95);

				if (e.props.car.value !== undefined) {
					index = Math.round(e.props.car.value);
					carLatLng = carSegments[index];

					if (carMarker.getElement()) {
						carMarker.setPosition(carLatLng);
					}


					if (e.props.car.value < min || e.props.car.value > max) {
						carMarker.parked();
					}

					carMarker.driving();
				}

			}

		);
	}

});define('interactive/posts/nashville/parallax/panMap', ['jQuery','parallax/calculate','element/responsive/windowDimensions'], function (jQuery,calculateParallax,dimensions) {

	
	
	

	var mapStartingCenter = null;


	return function (map, from, to, scrollStart, scrollDistance, fill, scrollY, startDistance, distance) {
		if (mapStartingCenter === null) {
			mapStartingCenter = map.getCenter();
		}
		var latitudeDistance = to.latLng.lat() - from.latLng.lat();

		calculateParallax(

			[{
				name:'latitude',
				from:from.latLng.lat(), 
				to:to.latLng.lat(), 
				scrollStart:scrollStart, 
				scrollDistance:scrollDistance,
				fill:fill
			},{
				name:'longitude',
				from:from.latLng.lng(), 
				to:to.latLng.lng(), 
				scrollStart:scrollStart, 
				scrollDistance:scrollDistance,
				fill:fill
			}], 

			scrollY, 

			function (e) {
				if (e.props.latitude.value !== undefined) {
					var latitudeRelativeDistance = e.props.latitude.value - from.latLng.lat();
					var latitudePercent = latitudeRelativeDistance / latitudeDistance;

					var latDistFromCenter = mapStartingCenter.lat() - e.props.latitude.value;
					var lngDistFromCenter = mapStartingCenter.lng() - e.props.longitude.value;
					var divisor = (dimensions.windowWidth < 900) ? 2 : 5;

					
					var lat = mapStartingCenter.lat() - (latDistFromCenter / divisor);
					var lng = mapStartingCenter.lng() - (lngDistFromCenter / divisor);


					var center = new google.maps.LatLng(lat, lng);
					map.setCenter(center);



				}

			}

		);
	}

});define('interactive/posts/nashville/parallax/parallaxSection', ['jQuery','underscore','parallax/calculate'], function (jQuery,_,calculateParallax) {

	
	
	


	return function parallaxSection (jqEl, jqElOffset, scrollY, windowHeight, marker, map) {
		var fadeInStart = jqElOffset.top;
		var fadeDistance = windowHeight;
		var contentFadeDistance = fadeDistance;

		calculateParallax(

			[{
				name:'visible',
				from:0, 
				to:1, 
				scrollStart:fadeInStart, 
				scrollDistance:fadeDistance,
				fill:'both'
			}], 

			scrollY, 

			function (e) {
				if (e.props.visible.value === 0 || e.props.visible.value === 1) {
					
					if (jqEl.hasClass('active')) {
						jqEl.one('transitionend', function () {
							jqEl.css({
								zIndex:0,
								top:'500%'
							})
						});

						jqEl.removeClass('active');
					}

				} else {

					if (!jqEl.hasClass('active')) {
						jqEl.css({
							zIndex:1000,
							top:0
						});
						jqEl.get(0).offsetHeight;

						jqEl.addClass('active');
					}
				}
			}

		);
		
	}

});define('interactive/posts/nashville/parallax/updateOdometer', ['jQuery','parallax/calculate'], function (jQuery,calculateParallax) {

	
	

	
	var mapStartingCenter = null;

	return function (map, from, to, scrollStart, scrollDistance, fill, scrollY, startDistance, distance) {
		if (mapStartingCenter === null) {
			mapStartingCenter = map.getCenter();
		}

		var odomenterEl = jQuery('#odometer-value');
		var stateEl = jQuery('#state');
		var timezoneEl = jQuery('#timezone');
		var latitudeDistance = to.latLng.lat() - from.latLng.lat();

		calculateParallax(

			[{
				name:'latitude',
				from:from.latLng.lat(), 
				to:to.latLng.lat(), 
				scrollStart:scrollStart, 
				scrollDistance:scrollDistance,
				fill:fill
			},{
				name:'longitude',
				from:from.latLng.lng(), 
				to:to.latLng.lng(), 
				scrollStart:scrollStart, 
				scrollDistance:scrollDistance,
				fill:fill
			}], 

			scrollY, 

			function (e) {
				if (e.props.latitude.value !== undefined) {
					var latitudeRelativeDistance = e.props.latitude.value - from.latLng.lat();
					var latitudePercent = latitudeRelativeDistance / latitudeDistance;
					var odometerValue;

					var latDistFromCenter = mapStartingCenter.lat() - e.props.latitude.value;
					var lngDistFromCenter = mapStartingCenter.lng() - e.props.longitude.value;

					odometerValue = Math.round(startDistance + distance * latitudePercent);
					odomenterEl.text(odometerValue);

					if (odometerValue > 145 && odometerValue < 836) {
						timezoneEl.text('Eastern Time Zone');
					} else {
						timezoneEl.text('Central Time Zone');
					}

					if (odometerValue > 155 && odometerValue < 180) {
						stateEl.text('Georgia');
					} else if (odometerValue > 346 && odometerValue < 661) {
						stateEl.text('North Carolina');
					} else {
						stateEl.text('Tennessee');
					}


				}

			}

		);
	};

});define('interactive/posts/nashville/scroll/handlerBuilder', [], function () {

	return function buildOnScroll(timeline) {
		var isTicking = false;

		return function (evt) {
			var scrollY;

			if (isTicking === true) {
				return;
			}

			scrollY = window.scrollY;
			isTicking = true;

			window.requestAnimationFrame(function () {
				timeline.advance(scrollY);

				isTicking = false;

			});
			
		};
	};

});define('interactive/posts/show', [], function () {


	return {
		load: function (data) {
			
		},

		unload: function () {

		}
	};

});define('model/FlickrImage', ['backbone'], function (Backbone) {


	


	var FlickrImage = Backbone.Model.extend({

		url: function (size) {
			size = size ? "_" + size : ""
			return "http://farm" + this.get("farm") + ".static.flickr.com/" + this.get("server") + "/" + this.get("id") + "_" + this.get("secret") + size + ".jpg"
		}

	});


	FlickrImage.fromUrl = function (url) {
		var str = url;
		var split;
		var attributes = {};
		str = str.replace('http://', '');

		split = str.split('/');

		attributes.farm = split[0].split('.')[0].replace('farm', '');
		attributes.server = split[1];
		attributes.id = split[2].split('_')[0];
		attributes.secret = split[2].split('_')[1].replace('.jpg', '');

		return new FlickrImage(attributes);
		
	};


	return FlickrImage


});define('parallax/calculate', [], function () {

	// time, beginning, change, duration
	Math.linearTween = function (t, b, c, d) {
		return c*t/d + b;
	};

	return function calculateParallax (props, currentScrollY, renderMethod) {
		var values = [];
		var renderProps = {};

		props.forEach(function (prop) {
			var distancePastStart;
			var value;

			if (currentScrollY < prop.scrollStart) {
				if (prop.fill === 'both' || prop.fill === 'backwards') {
					value = prop.from;
				}
			} else if (currentScrollY > prop.scrollStart + prop.scrollDistance) {
				if (prop.fill === 'both' || prop.fill === 'forwards') {
					value = prop.to;
				}
			} else {
				distancePastStart = currentScrollY - prop.scrollStart;
				value = Math.linearTween(distancePastStart / prop.scrollDistance, prop.from, prop.to - prop.from, 1);
			}


			renderProps[prop.name] = {
				value:value
			};

		});

		renderMethod({props:renderProps});

	};
});define('parallax/elements/siteHeader', ['jQuery','parallax/calculate'], function (jQuery,calculateParallax) {

	
	
	var siteHeader = jQuery('#site-header');

	var lastValue;
	return function (scrollY) {

		calculateParallax(

	        [{
	            name:'y',
	            from:0, 
	            to:153, 
	            scrollStart:0, 
	            scrollDistance:191,
	            fill:'both'
	        }], 

	        scrollY, 

	        function (e) {
	            siteHeader.css({
					transform:'translate3d(0, ' + e.props.y.value + 'px, 0)'
				});
	        }

	    );
	};

});